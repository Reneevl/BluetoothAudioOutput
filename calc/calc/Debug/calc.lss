
AVRASM ver. 2.2.7  C:\Users\renee\Documents\Blok 16\BluetoothAudioOutput\calc\calc\main.asm Mon Jun 22 20:51:37 2020

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m328pdef.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.3.300\avrasm\inc\m328pdef.inc'
                                 
                                 ;
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	sumendH	= r27
                                 .def	sumendL	= r26
                                 .def	sumcntH	= r29
                                 .def	sumcntL	= r28
                                 .def	sumopH	= r31
                                 .def	sumopL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; calc.asm
                                 ;
                                 ; Created: 26-5-2020 13:26:56
                                 ; Author : renee
                                 ;
                                 
                                 ;-------------------DIGIT AND OPERANT DEFENITIONS-------------------
                                 .equ	DIGIT0	= 0x00
                                 .equ	DIGIT1	= 0x01
                                 .equ	DIGIT2	= 0x02
                                 .equ	DIGIT3	= 0x03
                                 .equ	DIGIT4	= 0x04
                                 .equ	DIGIT5	= 0x05
                                 .equ	DIGIT6	= 0x06
                                 .equ	DIGIT7	= 0x07
                                 .equ	DIGIT8	= 0x08
                                 .equ	DIGIT9	= 0x09
                                 .equ	OPERAA	= 0x10
                                 .equ	OPERAS	= 0x20
                                 .equ	OPERAM	= 0x40
                                 .equ	OPERAD	= 0x80
                                 .equ	EMPTYB	= 0x0F
                                 
                                 ;-------------------REGISTER NAMES-------------------
                                 .def    outL = r0
                                 .def    outH = r1
                                 .def    row1 = r2
                                 .def    row2 = r3
                                 .def    row3  = r4
                                 .def    row4  = r5
                                 .def    row1pr  = r6
                                 .def    row2pr  = r7
                                 .def    row3pr  = r8
                                 .def    row4pr  = r9
                                 .def    ret0  = r10
                                 .def    ret1  = r11
                                 .def    opdigi  = r12
                                 .def    temp6  = r13
                                 .def    temp7 = r14
                                 .def    temp8  = r15
                                 .def    param0  = r16
                                 .def    param1  = r17
                                 .def    param2  = r18
                                 .def    param3  = r19
                                 .def    temp0 = r20
                                 .def    temp1 = r21
                                 .def    temp2 = r22
                                 .def    temp3 = r23
                                 .def    temp4 = r24
                                 .def	temp5 = r25
                                 
                                 ;.equ	sumend	= X
                                 ;.equ	sumcnt	= Y
                                 ;.equ	sumop	= Z
                                 
                                 ;-------------------STACK INIT AND SUMEND/INPUT RESET-------------------
                                 start:
000000 ef4f                      LDI	temp0,LOW(RAMEND)		; load low byte of RAMEND into r16
000001 bf4d                      OUT	SPL,temp0				; store r16 in stack pointer low
000002 e048                      LDI	temp0,HIGH(RAMEND)	; load high byte of RAMEND into r16
000003 bf4e                      OUT	SPH,temp0				; store r16 in stack pointer high
000004 e0a0                      LDI sumendL, 0x00
000005 e0b1                      LDI sumendH, 0x01
000006 24cc                      CLR opdigi
                                 
                                 ;-------------------UART INITIALISATION-------------------
                                 USART_Init:
                                 ; Set baud rate
000007 e647                      LDI temp0, 0x67
000008 9340 00c4                 STS UBRR0L, temp0
                                 ; Enable transmitter
00000a e048                      LDI temp0, (1<<TXEN0)
00000b 9340 00c1                 STS UCSR0B,temp0
                                 ; Set frame format: 8data, 2stop bit
00000d e046                      LDI temp0, (3<<UCSZ00)
00000e 9340 00c2                 STS UCSR0C, temp0
                                 
000010 940e 0214                 CALL Oplosbare_som_3
000012 940e 0016                 CALL Solve
                                 loop:
000014 940c 0014                 JMP loop
                                 ;-------------------SOLVING THE SUM IN MEMORY-------------------
                                 Solve:
000016 70c0                      CBR sumcntL, 0xFF					; begining of the sum
000017 e0d1                      LDI sumcntH, 0x01
                                 loop_multiply_and_devide:
                                 ;LOOP TO FIND ALL THE MULTIPLY AND DEVIDE SUMS
000018 7040                      CBR temp0, 0xFF
000019 2ea4                      MOV ret0, temp0						; reset
00001a 80c8                      LD  opdigi, Y						; load digit or operand from Y (AKA cumcnt)
00001b fcc6                      SBRC opdigi, 6						; skip next if not multiply
00001c 940e 005a                 CALL Calculate						; Calculate the sum
00001e fcc7                      SBRC opdigi, 7						; skip next if not devide
00001f 940e 005a                 CALL Calculate						; Calculate the sum
000021 940e 0139                 CALL sumcnt_increment				; increment the sumcnt
000023 940e 0142                 CALL sumcnt_end_check				; check if end is reached
000025 fea0                      SBRS ret0, 0						; if end is reached, skip next
000026 cff1                      RJMP loop_multiply_and_devide		; end is not reached, loop further
                                 
000027 70c0                      CBR sumcntL, 0xFF					; begining of the sum
000028 e0d1                      LDI sumcntH, 0x01
                                 loop_add_and_subtract:
                                 ;LOOP TO FIND ALL THE ADD AND SUBTRACT SUMS
000029 7040                      CBR temp0, 0xFF
00002a 2ea4                      MOV ret0, temp0						; reset
00002b 80c8                      LD  opdigi, Y						; load digit or operand from Y (AKA cumcnt)
00002c fcc4                      SBRC opdigi, 4						; skip next if not add
00002d 940e 005a                 CALL Calculate						; Calculate the sum
00002f fcc5                      SBRC opdigi, 5						; skip next if not subtract
000030 940e 005a                 CALL Calculate						; Calculate the sum
000032 940e 0139                 CALL sumcnt_increment				; increment the sumcnt
000034 7040                      CBR temp0, 0xFF
000035 2ea4                      MOV ret0, temp0						; reset
000036 940e 0142                 CALL sumcnt_end_check				; check if end is reached
000038 fea0                      SBRS ret0, 0						; if end is reached, skip next
000039 cfef                      RJMP loop_add_and_subtract		; end is not reached, loop further
                                 
                                 ;-------------------PRINT ANSWER-------------------
00003a 2744                      CLR temp0
00003b 2755                      CLR temp1
00003c 24aa                      CLR ret0
00003d e0c0                      LDI sumcntL, 0x00					; Reset to begin
00003e e0d1                      LDI sumcntH, 0x01
                                 
                                 Printloop:
00003f 940e 0142                 CALL sumcnt_end_check
000041 fca0                      SBRC ret0, 0						; if very end of the sum, do next
000042 940c 0014                 JMP loop
000044 9149                      LD temp0, Y+				
000045 2344                      TST temp0							; If zero, check if it is the first zero
000046 f071                      BREQ zero_print
000047 304f                      CPI temp0, EMPTYB					; Skip this
000048 f3b1                      BREQ Printloop
000049 6051                      SBR temp1, 1						; Rembember we printed something
                                 Print_my_byte:
00004a 2f04                      MOV param0, temp0
00004b e340                      LDI temp0, 0x30						; Make ASCII number
00004c 0f04                      ADD param0, temp0
00004d 940e 01b3                 CALL UART_Transmit
00004f 940e 0142                 CALL sumcnt_end_check
000051 fca0                      SBRC ret0, 0						; if very end of the sum, do next
000052 9508                      RET
                                 Throwback:
000053 940c 003f                 JMP Printloop
                                 
                                 zero_print:
000055 fd50                      SBRC temp1, 0						; skip the next line if this is the first zero
000056 940c 004a                 JMP Print_my_byte
000058 940c 0053                 JMP Throwback
                                 
                                 ;-------------------CALCULATE A PART OF THE FULL SUM-------------------
                                 Calculate:
00005a 93cf                      PUSH sumcntL
00005b 93df                      PUSH sumcntH
                                 ; We've found an operator! Let's find out with numbers are around it
00005c 2fec                      MOV sumopL, sumcntL						; Remember where the operator is
00005d 2ffd                      MOV sumopH, sumcnth
                                 
00005e e247                      LDI temp0, 0x27						;store 10000
00005f e150                      LDI temp1, 0x10
000060 935f                      PUSH temp1
000061 934f                      PUSH temp0
000062 e043                      LDI temp0, 0x03						;store 1000
000063 ee58                      LDI temp1, 0xE8
000064 935f                      PUSH temp1
000065 934f                      PUSH temp0
000066 e040                      LDI temp0, 0x00						;store 100
000067 e654                      LDI temp1, 0x64
000068 935f                      PUSH temp1
000069 934f                      PUSH temp0
00006a e040                      LDI temp0, 0x00						;store 10
00006b e05a                      LDI temp1, 0x0A
00006c 935f                      PUSH temp1
00006d 934f                      PUSH temp0
00006e e040                      LDI temp0, 0x00						;store 1
00006f e051                      LDI temp1, 0x01
000070 935f                      PUSH temp1
000071 934f                      PUSH temp0
                                 
000072 7040                      CBR temp0, 0xFF						; clear operandH 1
000073 7050                      CBR temp1, 0xFF						; clear operandL 1
000074 7060                      CBR temp2, 0xFF						; clear counter
                                 
                                 loop_operand_1:
                                 ;FIND THE FIRST OPERAND
000075 940e 013d                 CALL sumcnt_decrement
000077 8108                      LD param0, Y
000078 300f                      CPI param0, 0X0F					; chech if empty byte
000079 f3d9                      BREQ loop_operand_1					; skip if empty byte
00007a 2f80                      MOV temp4, param0					; make copy of reading
00007b 5180                      SUBI temp4, 0x10					; check if operant
00007c f4a0                      BRSH rewind					; digit is operand, jump to encode the second operand
00007d 940e 0156                 CALL sumcnt_begin_check
00007f fca0                      SBRC ret0, 0						; if end is begin, do next
000080 c010                      RJMP rewind
000081 7080                      CBR temp4, 0xFF						; clear number
000082 2f18                      MOV param1, temp4					; inserted digit (high) clear
000083 913f                      POP param3							; multiplier (high)
000084 912f                      POP param2							; multiplier (low)
000085 9563                      INC temp2							; count the pops
000086 940e 016a                 CALL Multiply_16bit					; multiply digit with 1, 10, 100, 1000.....
000088 0195                      MOVW param3:param2, ret1:ret0
000089 018a                      MOVW param1:param0, temp1:temp0
00008a 940e 0166                 CALL Add_16bit
00008c f013                      BRVS Overflow_path1						; quit because overflow
00008d 01a5                      MOVW temp1:temp0, ret1:ret0 
00008e cfe6                      RJMP loop_operand_1
                                 
                                 
                                 Overflow_path1:
00008f 940c 0127                 JMP Overflow
                                 
                                 ;RESET SOME STUFF
                                 rewind:								; clean up the stack
000091 3065                      CPI temp2, 0x05
000092 f021                      BREQ operand_2
000093 917f                      POP temp3
000094 917f                      POP temp3
000095 9563                      INC temp2
000096 cffa                      RJMP rewind
                                 
                                 operand_2:
                                 ;FIND THE SECOND OPERAND
000097 2fce                      MOV sumcntL, sumopL					; retreive the position of the operator
000098 2fdf                      MOV sumcntH, sumopH					; retreive the position of the operator
                                 
000099 934f                      PUSH temp0							; store previous operandL for a moment
00009a 935f                      PUSH temp1							; store previous operandH for a moment
                                 
00009b 7070                      CBR temp3, 0xFF						; clear operandH 2
00009c 7060                      CBR temp2, 0xFF						; clear operandL 2
                                 
00009d 2ea6                      MOV ret0, temp2
00009e 2eb6                      MOV ret1, temp2						; clear return values
                                 
                                 
                                 loop_operand_2:
00009f 940e 0139                 CALL sumcnt_increment
0000a1 8148                      LD temp0, Y							; temp0 is what is read
0000a2 2f84                      MOV temp4, temp0					; make copy of reading
0000a3 5180                      SUBI temp4, 0x10					; check if operant
0000a4 f4a8                      BRSH Calc_sum						; digit is operand than this is end of the sum
0000a5 940e 0142                 CALL sumcnt_end_check
0000a7 304f                      CPI temp0, 0X0F						; chech if empty byte
0000a8 f3b1                      BREQ loop_operand_2					; skip if empty byte
0000a9 fca0                      SBRC ret0, 0						; if very end of the sum, do next
0000aa c00f                      RJMP Calc_sum
0000ab 7080                      CBR temp4, 0xFF	
0000ac 2f17                      MOV param1, temp3					; param0 is operandH
0000ad 2f06                      MOV param0, temp2					; param1 is operandL
0000ae 2733                      CLR param3							; param 3 is multiplier (high) 0
0000af e02a                      LDI param2, 0x0A					; multiplier (low) 10
0000b0 940e 016a                 CALL Multiply_16bit					; multiply the operand with 10
0000b2 0195                      MOVW param3:param2, ret1:ret0		; solution goes to parameters
0000b3 2755                      CLR temp1							; the read value is always 1 byte and the add needs 2 bytes. Create some empty filling
0000b4 018a                      MOVW param1:param0, temp1:temp0		; the read value goes to parameters
0000b5 940e 0166                 CALL Add_16bit						; add both
0000b7 f2bb                      BRVS Overflow_path1					; quit because overflow
0000b8 01b5                      MOVW temp3:temp2, ret1:ret0			; store niew operator	
0000b9 cfe5                      RJMP loop_operand_2
                                 
                                 Calc_sum:
0000ba 915f                      POP temp1
0000bb 914f                      POP temp0
                                 ;CALCULATE THE SUM
0000bc 8180                      LD temp4, Z							; read operator
0000bd 018a                      MOVW param1:param0, temp1:temp0
0000be 019b                      MOVW param3:param2, temp2:temp3
0000bf fd87                      SBRC temp4,7						; check devide bit
0000c0 940e 0186                 CALL Devide_16bit
0000c2 fd86                      SBRC temp4,6						; check multiply bit
0000c3 940e 016a                 CALL Multiply_16bit
0000c5 fd85                      SBRC temp4,5						; check subtract bit
0000c6 940e 01a0                 CALL Sub_16bit
0000c8 fd84                      SBRC temp4,4						; check add bit
0000c9 940e 0166                 CALL Add_16bit
                                 
                                 Store_in_memory:					; our answer will be stored in temp1 and temp0 from this point
                                 ; We will need Y again to scroll through the sum, but knowing the end of this sum will be usefull later
0000cb 2eec                      MOV temp7, sumcntL					; Nobody ever uses these
0000cc 2efd                      MOV temp8, sumcntH
0000cd 01a5                      MOVW temp1:temp0, ret1:ret0
0000ce 2fce                      MOV sumcntL, sumopL					; retreive the position of the operator
0000cf 2fdf                      MOV sumcntH, sumopH					; retreive the position of the operator
0000d0 24aa                      CLR ret0
                                 
                                 
0000d1 e061                      LDI temp2, 0x01
0000d2 936f                      PUSH temp2
0000d3 e060                      LDI temp2, 0x00						;store 1
0000d4 936f                      PUSH temp2
0000d5 e06a                      LDI temp2, 0x0A
0000d6 936f                      PUSH temp2
0000d7 e060                      LDI temp2, 0x00						;store 10
0000d8 936f                      PUSH temp2
0000d9 e664                      LDI temp2, 0x64
0000da 936f                      PUSH temp2
0000db e060                      LDI temp2, 0x00						;store 100
0000dc 936f                      PUSH temp2
0000dd ee68                      LDI temp2, 0xE8
0000de 936f                      PUSH temp2
0000df e063                      LDI temp2, 0x03						;store 1000
0000e0 936f                      PUSH temp2
0000e1 e160                      LDI temp2, 0x10
0000e2 936f                      PUSH temp2
0000e3 e267                      LDI temp2, 0x27						;store 10000
0000e4 936f                      PUSH temp2
                                 
0000e5 e065                      LDI temp2, 0x05						; make counter
0000e6 2ed6                      MOV temp6, temp2					; make temp6 the counter
                                 
                                 Find_begin:
0000e7 916a                      LD temp2, -Y
0000e8 940e 0156                 CALL sumcnt_begin_check
0000ea fca0                      SBRC ret0, 0						; if we've hit the begin, start filling
0000eb c002                      RJMP Begin_found
0000ec 3160                      CPI temp2, 0x10						; if temp2 is not an operators (operators are higher than 0x10) loop again
0000ed f3c8                      BRLO Find_Begin
                                 
                                 Begin_found:
0000ee 9169                      LD temp2, Y+
0000ef 2799                      CLR temp5							; clear the 'a digit has been stored' check
                                 Storing:
0000f0 94da                      DEC temp6
0000f1 917f                      POP temp3							; temp3 and temp2 are 10000, 1000, 100, 10 or 1
0000f2 916f                      POP temp2
0000f3 019b                      MOVW param3:param2, temp3:temp2
0000f4 018a                      MOVW param1:param0, temp1:temp0
0000f5 940e 0186                 CALL Devide_16bit					; Devide the to be saved number by 10000, 1000, 100, 10, 1 to find each digit
0000f7 2d8a                      MOV temp4, ret0						; Save the result somewhere
0000f8 20aa                      TST ret0							; Test if the result is zero, zero may not always need to be saved
0000f9 f091                      BREQ Zero_digit
                                 
                                 
                                 Store_digit:
                                 ; SPLIT NUMBER IN PARTS (TENTHOUSANDS, THOUSANDS, HUNDREDS...) TO STORE IN MEMORY
0000fa 6091                      SBR temp5, 1
0000fb 019b                      MOVW param3:param2, temp3:temp2		; move stack value in parameters
0000fc 0185                      MOVW param1:param0, ret1:ret0		; Move devision answer in parameters
0000fd 940e 016a                 CALL Multiply_16bit
0000ff 018a                      MOVW param1:param0, temp1:temp0		; Move the number we should store to parameters
000100 0195                      MOVW param3:param2, ret1:ret0		; Move the digit we're going to store * its value to the parameters
000101 940e 01a0                 CALL Sub_16bit						; our number that we want to save is now smaller
000103 01a5                      MOVW temp1:temp0, ret1:ret0			; Move our new to store number
000104 0185                      MOVW param1:param0, ret1:ret0		; The new to store number should be compared to zero
000105 9389                      ST Y+, temp4						; Store the digit
000106 940e 01a4                 CALL Test_word_for_zero
000108 20dd                      TST temp6							; If we've tried to store 5 times, we're done
000109 f051                      BREQ  Filler
00010a 940c 00f0                 JMP Storing
                                 
                                 Zero_digit:
                                 ; DECIDE WHETHER TO STORE A 0
00010c ff90                      SBRS temp5, 0
00010d 940c 00f0                 JMP Storing
00010f 9389                      ST Y+, temp4
000110 20dd                      TST temp6							; If we've tried to store 5 times, we're done
000111 f011                      BREQ  Filler
000112 940c 00f0                 JMP Storing
                                 
                                 Filler:
                                 ; RECALL THE POSITION OF THE OPERATOR
000114 2dff                      MOV sumopH, temp8
000115 2dee                      MOV sumopL, temp7
000116 24aa                      CLR ret0
                                 
                                 Filler_loop:
                                 ; FILL UP MEMORY UNTIL OPERATOR OR SUMEND WITH 0X0F (EMPTYB)
000117 e05f                      LDI temp1, EMPTYB
000118 8148                      LD temp0, Y
000119 940e 014c                 CALL sumcnt_op_check
00011b fca0                      SBRC ret0, 0						; if very end of the sum, do next
00011c c007                      RJMP End_sum
00011d 940e 0142                 CALL sumcnt_end_check
00011f fca0                      SBRC ret0, 0						; if very end of the sum, do next
000120 c003                      RJMP End_sum
000121 9359                      ST Y+, temp1 
000122 940c 0117                 JMP Filler_loop
                                 
                                 End_sum:
000124 91df                      POP sumcntH
000125 91cf                      POP sumcntL
000126 9508                      RET
                                 
                                 ;-------------------OVERFLOW HAS OCCURD-------------------
                                 Overflow:
000127 e405                      LDI param0, 0x45					;E
000128 940e 01b3                 CALL UART_Transmit
00012a e502                      LDI param0, 0x52					;R
00012b 940e 01b3                 CALL UART_Transmit
00012d e502                      LDI param0, 0x52					;R
00012e 940e 01b3                 CALL UART_Transmit
000130 e40f                      LDI param0, 0x4F					;O
000131 940e 01b3                 CALL UART_Transmit
000133 e502                      LDI param0, 0x52					;R
000134 940e 01b3                 CALL UART_Transmit
000136 940e 01bc                 CALL Reset
                                 
000138 9508                      RET
                                 
                                 ;-------------------SUMCNT PLUS ONE-------------------
                                 sumcnt_increment:
000139 95c3                      INC sumcntL
00013a f483                      BRVC end
00013b 95d3                      INC sumcntH
00013c 9508                      RET
                                 
                                 
                                 ;-------------------SUMCNT MINUS ONE-------------------
                                 sumcnt_decrement:
00013d 95ca                      DEC sumcntL
00013e 3fcf                      CPI sumcntL, 0xFF
00013f f459                      BRNE end
000140 95da                      DEC sumcntH
000141 9508                      RET
                                 
                                 ;-------------------CHECK IF THE SUMCNT HAS REACHED THE END-------------------
                                 sumcnt_end_check:
000142 24aa                      CLR ret0
000143 17bd                      CP sumendH, sumcntH		; compare the high registers
000144 f431                      BRNE end				; if not equal, end the check
000145 17ac                      CP sumendL, sumcntL		; compare low registers
000146 f421                      BRNE end				; if not equal, end the check
000147 934f                      PUSH temp0
000148 6041                      SBR temp0, 1				; if both are equal, set bit 0 or return
000149 2ea4                      MOV ret0, temp0			; if both are equal, set bit 0 or return
00014a 914f                      POP temp0
00014b 9508                      end: RET
                                 
                                 ;-------------------CHECK IF THE SUMCNT HAS REACHED THE OPERATOR-------------------
                                 sumcnt_op_check:
00014c 24aa                      CLR ret0
00014d 17fd                      CP sumopH, sumcntH		; compare the high registers
00014e f7e1                      BRNE end				; if not equal, end the check
00014f 17ec                      CP sumopL, sumcntL		; compare low registers
000150 f7d1                      BRNE end				; if not equal, end the check
000151 934f                      PUSH temp0
000152 6041                      SBR temp0, 1			; if both are equal, set bit 0 or return
000153 2ea4                      MOV ret0, temp0			; if both are equal, set bit 0 or return
000154 914f                      POP temp0
000155 9508                      RET
                                 
                                 ;-------------------CHECK IF THE SUMCNT HAS REACHED THE BEGIN-------------------
                                 sumcnt_begin_check:
000156 934f                      PUSH temp0
000157 24aa                      CLR ret0
000158 30d0                      CPI   sumcntH,0x00		; compare the high registers
000159 f431                      BRNE not_equal			; if not equal, end the check
00015a 3fcf                      CPI   sumcntL,0xFF		; compare low registers
00015b f421                      BRNE not_equal			; if not equal, end the check
                                 equal:
00015c 6041                      SBR temp0, 1
00015d 2ea4                      MOV ret0, temp0
00015e 914f                      POP temp0
00015f 9508                      RET
                                 not_equal:
000160 7f4e                      CBR temp0, 1
000161 2ea4                      MOV ret0, temp0
000162 914f                      POP temp0
000163 9508                      RET
                                 
                                 ;-------------------JMP TO OVERFLOW-------------------
                                 Overflow_path:
000164 940c 0127                 JMP Overflow
                                 
                                 ;-------------------ADD PARAM1:PARAM0 with PARAM3:PARAM2-------------------
                                 Add_16bit:
                                  ; Add param3:param2 to param1:param0
000166 0f20                      add param2, param0 ; Add low byte
000167 1f31                      adc param3, param1; Add with carry high byte
000168 0159                      MOVW ret1:ret0, param3:param2
000169 9508                      RET
                                 
                                 ;-------------------MULTIPLY PARAM1:PARAM0 BY PARAM3:PARAM2-------------------
                                 Multiply_16bit:
00016a 934f                      PUSH temp0
00016b 935f                      PUSH temp1
00016c 936f                      PUSH temp2
00016d 937f                      PUSH temp3
                                 
00016e 2744                      CLR temp0 ; clear for carry operations
00016f 9f13                      MUL param1,param3 ; Multiply MSBs
000170 2d50                      MOV temp1,outL ; copy to MSW Result
000171 2d61                      MOV temp2,outH
000172 9f02                      MUL param0,param2 ; Multiply LSBs
000173 2ca0                      MOV ret0,outL ; copy to LSW Result
000174 2cb1                      MOV ret1,outH
000175 9f12                      MUL param1,param2 ; Multiply 1M with 2L
000176 0cb0                      ADD ret1,outL ; Add to Result
000177 1d51                      ADC temp1,outH
000178 1f64                      ADC temp2,temp0 ; add carry
000179 9f03                      MUL param0,param3 ; Multiply 1L with 2M
00017a 0cb0                      ADD ret1,outL ; Add to Result
00017b 1d51                      ADC temp1,outH
00017c 1f64                      ADC temp2,temp0
                                 
00017d 2777                      CLR temp3
00017e 9573                      INC temp3
00017f 1757                      CP temp1, temp3
000180 f71c                      BRGE Overflow_path
                                 
000181 917f                      POP temp3
000182 916f                      POP temp2
000183 915f                      POP temp1
000184 914f                      POP temp0
                                 
000185 9508                      RET
                                 
                                 ;-------------------DEVIDE PARAM1:PARAM0 BY PARAM3:PARAM2-------------------
                                 Devide_16bit:
000186 934f                      PUSH temp0				; remainder low byte
000187 935f                      PUSH temp1				; remainder high byte
000188 936f                      PUSH temp2				; counter
                                 div16u:	
000189 2744                      CLR	temp0			;clear remainder Low byte
00018a 1b55                      SUB	temp1,temp1		;clear remainder High byte and carry
00018b e161                      LDI	temp2,17		;init loop counter
                                 d16u_1:	
00018c 1f00                      ROL	param0			; Low byte dividend shift left
00018d 1f11                      ROL	param1			; High byte dividend shift left
00018e 956a                      DEC	temp2			;decrement counter
00018f f429                      BRNE d16u_2			;if done
000190 0158                      MOVW ret1:ret0, param1:param0
000191 916f                      POP temp2
000192 915f                      POP temp1
000193 914f                      POP temp0
000194 9508                      RET				;    return
                                 d16u_2:	
000195 1f44                      ROL	temp0		;shift dividend into remainder
000196 1f55                      ROL	temp1
000197 1b42                      SUB	temp0,param2		;remainder = remainder - divisor
000198 0b53                      SBC	temp1,param3		;
000199 f420                      BRCC	d16u_3			;if result negative
00019a 0f42                      ADD	temp0,param2		;    restore remainder
00019b 1f53                      ADC	temp1,param3
00019c 9488                      CLC				;    clear carry to be shifted into result
00019d cfee                      RJMP	d16u_1			;else
                                 d16u_3:	
00019e 9408                      SEC				;    set carry to be shifted into result
00019f cfec                      RJMP	d16u_1
                                 
                                 ;-------------------SUBTRACT TWO WORDS-------------------
                                 Sub_16bit:
0001a0 1b02                      SUB	param0, param2		;Subtract low bytes
0001a1 0b13                      SBC	param1, param3
0001a2 0158                      MOVW ret1:ret0, param1:param0
0001a3 9508                      RET
                                 
                                 ;-------------------TEST IF PARAM0 AND PARAM1 ARE 0-------------------
                                 Test_word_for_zero:
0001a4 934f                      PUSH temp0
0001a5 24aa                      CLR ret0
0001a6 2744                      CLR temp0
0001a7 2300                      TST param0
0001a8 f431                      BRNE not_zero
0001a9 2311                      TST param1
0001aa f421                      BRNE not_zero
0001ab 6041                      SBR temp0, 1
0001ac 2ea4                      MOV ret0, temp0
0001ad 914f                      POP temp0
0001ae 9508                      RET
                                 not_zero:
0001af 7f4e                      CBR temp0, 1
0001b0 2ea4                      MOV ret0, temp0
0001b1 914f                      POP temp0
0001b2 9508                      RET
                                 
                                  
                                 ;-------------------SEND BYTE UART-------------------  
                                 UART_Transmit:
                                 ; Wait for empty transmit buffer
0001b3 9180 00c0                 LDS temp4, UCSR0A
0001b5 ff85                      SBRS temp4, UDRE0
0001b6 cffc                      RJMP UART_Transmit
                                 ; Put data into buffer, sends the data
0001b7 9300 00c6                 STS UDR0, param0
0001b9 0000                      NOP
0001ba 0000                      NOP
0001bb 9508                      RET
                                 
                                 ;-------------------RESET SYSTEM-------------------
                                 Reset:
0001bc 24cc                      CLR opdigi
0001bd e0b1                      LDI sumendH, 0x01
0001be e0a0                      LDI sumendL, 0x00
0001bf e0d1                      LDI sumcntH, 0x01
0001c0 e0c0                      LDI sumcntL, 0x00
0001c1 2744                      CLR temp0
0001c2 2755                      CLR temp1
0001c3 2766                      CLR temp2
0001c4 2777                      CLR temp3
0001c5 2788                      CLR temp4
0001c6 2799                      CLR temp5
0001c7 24dd                      CLR temp6
0001c8 24ee                      CLR temp7
0001c9 24ff                      CLR temp8
0001ca 2400                      CLR outL
0001cb 2411                      CLR outH
0001cc 2422                      CLR row1
0001cd 2433                      CLR row2
0001ce 2444                      CLR row3
0001cf 2455                      CLR row4
0001d0 2422                      CLR row1
0001d1 2433                      CLR row2
0001d2 2488                      CLR row3pr
0001d3 2499                      CLR row4pr
0001d4 24aa                      CLR ret0
0001d5 24bb                      CLR ret1
0001d6 2700                      CLR param0
0001d7 2711                      CLR param1
0001d8 2722                      CLR param2
0001d9 2733                      CLR param3
0001da 9508                      RET
                                 
                                 ;-------------------TEST SUM-------------------
                                 Oplosbare_som_1:
                                 ; 629-20-4 = 605
                                 ; THIS PROVES THE ABILLITY TO
                                 ; - READ A THREE DIGIT NUMBER FROM MEMORY
                                 ; - READ A TWO DIGIT NUMBER FROM MEMORY
                                 ; - SOLVE A SUBTRACT
                                 ; - STORE A 3 DIGIT NUMBER WITH A 0
                                 ; - FILL UP THE GAPS UNTIL OPERATOR
                                 ; - READ A SECOND SUM (IGNORING THE FILLING)
                                 ; - READ A ONE DIGIT NUMBER
                                 ; - PRINT MEMORY WITH NUMBER 0
0001db e046                      LDI temp0, DIGIT6
0001dc 9340 0100                 STS 0x0100, temp0					; 6
0001de e042                      LDI temp0, DIGIT2
0001df 9340 0101                 STS 0x0101, temp0					; 2
0001e1 e049                      LDI temp0, DIGIT9
0001e2 9340 0102                 STS 0x0102, temp0					; 9
0001e4 e240                      LDI temp0, OPERAS
0001e5 9340 0103                 STS 0x0103, temp0					; -
0001e7 e042                      LDI temp0, DIGIT2
0001e8 9340 0104                 STS 0x0104, temp0					; 2
0001ea e040                      LDI temp0, DIGIT0
0001eb 9340 0105                 STS 0x0105, temp0					; 0
0001ed e240                      LDI temp0, OPERAS
0001ee 9340 0106                 STS 0x0106, temp0					; -
0001f0 e044                      LDI temp0, DIGIT4
0001f1 9340 0107                 STS 0x0107, temp0					; 4
0001f3 e0b1                      LDI sumendH, 0x01
0001f4 e0a8                      LDI sumendL, 0x08
0001f5 9508                      RET
                                 
                                 Oplosbare_som_2:
                                 ; 20+1000/8 = 145
                                 ; THIS PROVES THE ABILLITY TO
                                 ; - READ A FOUR DIGIT NUMBER FROM MEMORY
                                 ; - READ A ONE DIGIT NUMBER FROM MEMORY
                                 ; - SOVE A MULTIPLY/DEVIDE BEFORE ADD/SUBTRACT
                                 ; - STORE A THREE DIGIT NUMBER
                                 ; - FILL UP THE GAPS UNTIL END
                                 ; - READ A SECOND SUM (IGNORING THE FILLING)
                                 ; - PRINT MEMORY
0001f6 e042                      LDI temp0, DIGIT2
0001f7 9340 0100                 STS 0x0100, temp0					; 2
0001f9 e040                      LDI temp0, DIGIT0
0001fa 9340 0101                 STS 0x0101, temp0					; 0
0001fc e140                      LDI temp0, OPERAA
0001fd 9340 0102                 STS 0x0102, temp0					; +
0001ff e041                      LDI temp0, DIGIT1
000200 9340 0103                 STS 0x0103, temp0					; 1
000202 e040                      LDI temp0, DIGIT0
000203 9340 0104                 STS 0x0104, temp0					; 0
000205 e040                      LDI temp0, DIGIT0
000206 9340 0105                 STS 0x0105, temp0					; 0
000208 e040                      LDI temp0, DIGIT0
000209 9340 0106                 STS 0x0106, temp0					; 0
00020b e840                      LDI temp0, OPERAD
00020c 9340 0107                 STS 0x0107, temp0					; /
00020e e048                      LDI temp0, DIGIT8
00020f 9340 0108                 STS 0x0108, temp0					; 8
000211 e0b1                      LDI sumendH, 0x01
000212 e0a9                      LDI sumendL, 0x09
000213 9508                      RET
                                 
                                 Oplosbare_som_3:
                                 ; 1200*10-860/8 = 12000-107= 11893
                                 ; THIS PROVES THE ABILLITY TO
                                 ; - READ A FOUR DIGIT NUMBER FROM MEMORY
                                 ; - READ A TWO DIGIT NUMBER FROM MEMORY
                                 ; - SOVE A MULTIPLY/DEVIDE BEFORE ADD/SUBTRACT
                                 ; - STORE A FIVE DIGIT NUMBER
                                 ; - FILL UP THE GAPS UNTIL END
                                 ; - READ A THREE DIGIT NUMBER FROM MEMORY
                                 ; - READ A ONE DIGIT NUMBER FROM MEMORY
                                 ; - SOVE A MULTIPLY/DEVIDE BEFORE ADD/SUBTRACT
                                 ; - ROUND A DIVIDE
                                 ; - STORE A THREE DIGIT NUMBER
                                 ; - READ A FIVE DIGIT NUMBER
000214 e041                      LDI temp0, DIGIT1
000215 9340 0100                 STS 0x0100, temp0					; 1
000217 e042                      LDI temp0, DIGIT2
000218 9340 0101                 STS 0x0101, temp0					; 2
00021a e040                      LDI temp0, DIGIT0
00021b 9340 0102                 STS 0x0102, temp0					; 0
00021d e040                      LDI temp0, DIGIT0
00021e 9340 0103                 STS 0x0103, temp0					; 0
000220 e440                      LDI temp0, OPERAM
000221 9340 0104                 STS 0x0104, temp0					; *
000223 e041                      LDI temp0, DIGIT1
000224 9340 0105                 STS 0x0105, temp0					; 1
000226 e040                      LDI temp0, DIGIT0
000227 9340 0106                 STS 0x0106, temp0					; 0
000229 e240                      LDI temp0, OPERAS
00022a 9340 0107                 STS 0x0107, temp0					; -
00022c e048                      LDI temp0, DIGIT8
00022d 9340 0108                 STS 0x0108, temp0					; 8
00022f e046                      LDI temp0, DIGIT6
000230 9340 0109                 STS 0x0109, temp0					; 6
000232 e040                      LDI temp0, DIGIT0
000233 9340 010a                 STS 0x010A, temp0					; 0
000235 e840                      LDI temp0, OPERAD
000236 9340 010b                 STS 0x010B, temp0					; /
000238 e048                      LDI temp0, DIGIT8
000239 9340 010c                 STS 0x010C, temp0					; 8
00023b e0b1                      LDI sumendH, 0x01
00023c e0ad                      LDI sumendL, 0x0D


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :  11 z  :   1 r0 :   5 r1 :   5 r2 :   2 r3 :   2 r4 :   1 
r5 :   1 r6 :   0 r7 :   0 r8 :   1 r9 :   1 r10:  42 r11:  17 r12:   8 
r13:   5 r14:   3 r15:   3 r16:  28 r17:  18 r18:  16 r19:  16 r20: 143 
r21:  41 r22:  48 r23:  15 r24:  18 r25:   4 r26:   6 r27:   6 r28:  16 
r29:  15 r30:   5 r31:   5 
Registers used: 32 out of 35 (91.4%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   6 add   :   5 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 
brcc  :   1 brcs  :   0 break :   0 breq  :   8 brge  :   1 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 brlt  :   0 brmi  :   0 
brne  :  10 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   0 brvc  :   1 
brvs  :   2 bset  :   0 bst   :   0 call  :  38 cbi   :   0 cbr   :  14 
clc   :   1 clh   :   0 cli   :   0 cln   :   0 clr   :  43 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   5 cpc   :   0 
cpi   :   8 cpse  :   0 dec   :   4 eor   :   0 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   5 jmp   :  11 
ld    :   9 ldd   :   0 ldi   :  81 lds   :   1 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :  33 movw  :  20 mul   :   4 muls  :   0 mulsu :   0 
neg   :   0 nop   :   2 or    :   0 ori   :   0 out   :   2 pop   :  23 
push  :  35 rcall :   0 ret   :  20 reti  :   0 rjmp  :  13 rol   :   4 
ror   :   0 sbc   :   2 sbci  :   0 sbi   :   0 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   6 sbrc  :  16 sbrs  :   4 sec   :   1 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   3 std   :   0 sts   :  34 
sub   :   3 subi  :   2 swap  :   0 tst   :   6 wdr   :   0 
Instructions used: 42 out of 113 (37.2%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00047c   1148      0   1148   32768   3.5%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
